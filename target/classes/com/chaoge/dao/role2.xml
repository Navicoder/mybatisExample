<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chaoge.dao.RoleDao">

    <!-- 当使用 MyBatis 进行查询的时候如果一个 JavaBean 中包含另一个 JavaBean 或者 Collection 时，可以通过 MyBatis 的嵌套查询来获取需要的结果;
以下以用户登录时的角色和菜单直接的关系为例使用嵌套查询

    如果再一个查询中可以直接查询到所需要的数据，但是需要映射到该对象的属性上，则可以使用该方式 -->
    <resultMap id="BaseRoleResultMap" type="com.chaoge.entity.RoleModel">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="is_active" property="isActive" jdbcType="BOOLEAN"/>
        <result column="description" property="description" jdbcType="VARCHAR"/>
        <result column="last_update_time" property="lastUpdateTime" jdbcType="TIMESTAMP"/>
<!--
        collection : 一个复杂的类型关联，许多结果将映射为这种类型
        property : 这是关联的 JavaBean 中的属性名， 在 RoleModel 中对应 private List<MenuModel> menus;
        javaType : property 属性对应的集合类型
        ofType : property 集合中的泛型，在 RoleModel 中是 MenuModel

        column : RoleModel 的 id ，作为参数传入被调用的 Select 语句
        select : 另外一个映射语句的 ID
        -->
        <collection property="menus" ofType="com.chaoge.entity.MenuModel" javaType="java.util.ArrayList" >
            <id column="id" property="id" jdbcType="INTEGER"/>
            <result column="value" property="value" jdbcType="VARCHAR"/>
            <result column="display_value" property="displayValue" jdbcType="VARCHAR"/>
            <result column="url" property="url" jdbcType="VARCHAR"/>
            <result column="category" property="category" jdbcType="INTEGER"/>
            <result column="description" property="description" jdbcType="VARCHAR"/>
            <result column="is_active" property="isActive" jdbcType="BIT"/>
            <result column="last_update_time" property="lastUpdateTime" jdbcType="TIMESTAMP"/>
        </collection>
    </resultMap>

    <select id="getRoles" parameterType="java.lang.Integer" resultMap="BaseRoleResultMap">
        SELECT
            r.id,
            r.name,
            r.description,
            r.is_active,
            r.last_update_time,
            m.id,
            m.value,
            m.display_value,
            m.url,
            m.category,
            m.description,
            m.is_active,
            m.last_update_time
        FROM role r
            LEFT JOIN role_menu_xref rmx
                ON r.id = rmx.role_id
            LEFT JOIN menu m
                ON m.id = rmx.menu_id
        WHERE r.id = #{roleId,jdbcType=INTEGER}
    </select>


    <insert id="insertRole" parameterType="com.chaoge.entity.RoleModel" useGeneratedKeys="true" keyProperty="id">
       INSERT INTO role (name, description, last_update_time) VALUES (#{name,jdbcType=VARCHAR},#{description,jdbcType=VARCHAR},#{lastUpdateTime,jdbcType=TIMESTAMP});
    </insert>

    <insert id="batchInsert" parameterType="list" >
       INSERT INTO role (`name`, description, last_update_time) VALUES
       <foreach collection="list" item="item" separator=",">
           (#{item.name,jdbcType=VARCHAR},#{item.description,jdbcType=VARCHAR},#{item.lastUpdateTime,jdbcType=TIMESTAMP})
       </foreach>
    </insert>

</mapper>
